"""
main.py
"""
import copy
import re
import logging
from telebot import types
from random import randint
from PIL import Image, ImageDraw
from typing import Callable, Literal
from static import *
from util import (download_font,
                  pick_title_params,
                  istoowide,
                  define_fill,
                  make_corner_type_markup,
                  make_interface_markup,
                  make_photo_bg_markup,
                  edit_custom_message)
from drawing import (create_preview_pic,
                     redraw_rectangle,
                     draw_preview_digits,
                     draw_upper_lower_rectangles,
                     draw_photo,
                     draw_corners,
                     draw_upper_title,
                     draw_lower_title,
                     draw_copyright)


logging.basicConfig(level=logging.INFO, filename=f'app.log', filemode='w',
                    format='%(asctime)s %(levelname)s %(message)s')
download_font(FONT_URL)
color2hex: Dict[str, str] = {
    'üü¶ –ì–æ–ª—É–±–æ–π':    '#94FCFF',
    'üü© –ó–µ–ª—ë–Ω—ã–π':    '#73E153',
    'üüß –û—Ä–∞–Ω–∂–µ–≤—ã–π':  '#F06C00',
    'üü® –ñ—ë–ª—Ç—ã–π':     '#FFFA00',
    'üü• –ö—Ä–∞—Å–Ω—ã–π':    '#D9003A',
    'üíñ –†–æ–∑–æ–≤—ã–π':    '#E04BCE',
    'üü™ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π': '#5E00A2',
}
ids_to_delete: Dict[int, List[int]] = dict()
# –∫–ª—é—á ‚Äì –∞–π–¥–∏ —á–∞—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì —Å–ø–∏—Å–æ–∫ —Å –∞–π–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
covers_info: Dict[int, Dict[str, str | bool | int | List | Dict]] = dict()
# –∫–ª—é—á ‚Äì –∞–π–¥–∏ —á–∞—Ç–∞, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äì —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ–±–ª–æ–∂–∫–∏


def delete_messages(chat_id: int) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ –ø–æ –∏—Ö –∞–π–¥–∏, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–º –≤ ids_to_delete
    :param chat_id: –∞–π–¥–∏ —á–∞—Ç–∞
    """
    global ids_to_delete
    for i in ids_to_delete[chat_id]:
        BOT.delete_message(chat_id, i)
        logging.info(f'{chat_id} –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ, –∞–π–¥–∏: {i}')


def reset_all_info(chat_id: int) -> None:
    """
    ¬´–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç¬ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–ª–æ–∂–∫–µ, –∞–π–¥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è,
    —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤; —É–¥–∞–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    global covers_info, ids_to_delete
    ids_to_delete[chat_id] = list()
    logging.warning(f'{chat_id} –°–±–æ—Ä—à–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–π–¥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {ids_to_delete[chat_id]}')
    photo_path = covers_info.get(chat_id, dict()).get('photo', '_')
    preview_pic_path = PATH_TO_SAVE + str(chat_id) + '_' + PREVIEW_PIC_POSTFIX
    result_pic_path = PATH_TO_SAVE + str(chat_id) + '_' + RESULT_PIC_POSTFIX
    for path in (photo_path, preview_pic_path, result_pic_path):
        if os.path.exists(path):
            os.remove(path)
            logging.warning(f'{chat_id} –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {path}')
    covers_info[chat_id] = copy.deepcopy(COVER_BASE_INFO)
    logging.warning(f'{chat_id} –°–±—Ä–æ—à–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–ª–æ–∂–∫–µ: {covers_info[chat_id]}')


@BOT.message_handler(commands=['start'])
def process_photo(message: types.Message) -> None:
    """
    –≠—Ç–∞–ø 1–∞: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (1–±)
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    chat_id = message.chat.id
    reset_all_info(chat_id)
    msg = BOT.send_message(
        chat_id,
        text='–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞'
    )
    ids_to_delete[chat_id].append(msg.message_id)
    BOT.register_next_step_handler(message, check_photo)


@BOT.callback_query_handler(func=lambda call: call.data.startswith('photo-other'))
def process_other_photo(call: types.CallbackQuery) -> None:
    """
    –≠—Ç–∞–ø 1–≤: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (1–±)
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç ¬´–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π¬ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1–±)
    """
    global ids_to_delete
    chat_id = call.message.chat.id
    ids_to_delete[chat_id].append(int(call.data.split('_')[1]))
    photo_path = covers_info[chat_id]['photo']
    os.remove(photo_path)
    logging.warning(f'{chat_id} –£–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {photo_path}')
    msg = BOT.send_message(
        chat_id,
        text='–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ'
    )
    ids_to_delete[chat_id].append(msg.message_id)
    BOT.register_next_step_handler(msg, check_photo)


@BOT.callback_query_handler(func=lambda call: call.data.startswith('bg'))
def save_photo_bg(call: types.CallbackQuery) -> None:
    """
    –≠—Ç–∞–ø 1–¥: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—á–∞–ª—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (2–∞)
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Ñ–æ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (1–≥)
    """
    chat_id = call.message.chat.id
    photo_bg = call.data.split('_')[1]
    covers_info[chat_id]['photo_bg'] = photo_bg
    logging.info(f'{chat_id} –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–æ–Ω –¥–ª—è —Ñ–æ—Ç–æ: {photo_bg}')
    delete_messages(chat_id)
    process_upper_title(call.message)


@BOT.callback_query_handler(func=lambda call: call.data.startswith('photo-bg'))
def process_photo_bg(call: types.CallbackQuery) -> None:
    """
    –≠—Ç–∞–ø 1–≥: –≤—ã–±–æ—Ä —Ñ–æ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç—Ç–∞–ø—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (1–¥)
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    chat_id = call.message.chat.id
    msg = BOT.send_message(
        chat_id,
        text='–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –¥–ª—è –∑–æ–Ω—ã —Ñ–æ—Ç–æ',
        reply_markup=make_photo_bg_markup()
        )
    ids_to_delete[chat_id].append(msg.message_id)


@BOT.callback_query_handler(func=lambda call: call.data.startswith('photo-crop'))
def save_crop(call: types.CallbackQuery) -> None:
    """
    –≠—Ç–∞–ø 1–µ: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—á–∞–ª—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (2–∞)
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    chat_id = call.message.chat.id
    mask = True
    covers_info[chat_id]['mask'] = mask
    logging.info(f'{chat_id} –í–∫–ª—é—á–µ–Ω–∞ –º–∞—Å–∫–∞ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {mask}')
    delete_messages(chat_id)
    process_upper_title(call.message)


def check_photo(message: types.Message) -> None:
    """
    –≠—Ç–∞–ø 1–±: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω,
    —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –¥—Ä—É–≥–æ–≥–æ —Ñ–æ—Ç–æ (1–≤), –≤—ã–±–æ—Ä—É —Ñ–æ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (1–≥),
    —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –º–∞—Å–∫–∏ –¥–ª—è –æ–±—Ä–µ–∑–∞–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (1–µ), –Ω–∞—á–∞–ª—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (2–∞)
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è) (1–∞)
    """
    global ids_to_delete
    chat_id = message.chat.id
    if message.content_type != 'document':
        logging.warning(f'{chat_id} –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ, –Ω–µ —Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message.content_type}')
        ids_to_delete[chat_id].append(message.message_id)
        msg = BOT.send_message(
            chat_id,
            text='–ú–Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑'
            )
        ids_to_delete[chat_id].append(msg.message_id)
        BOT.register_next_step_handler(msg, check_photo)
        return

    file_extension = message.document.file_name.split('.')[-1]
    if file_extension not in ('png', 'jpg', 'jpeg'):
        logging.warning(f'{chat_id} –§–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ, –Ω–µ —Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {file_extension}')
        ids_to_delete[chat_id].append(message.message_id)
        msg = BOT.send_message(
            chat_id,
            text='–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ —Å —Ñ–∞–π–ª–∞–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞ png, jpg, jpeg. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª'
            )
        ids_to_delete[chat_id].append(msg.message_id)
        BOT.register_next_step_handler(msg, check_photo)
        return

    file_info = BOT.get_file(message.document.file_id)
    photo = BOT.download_file(file_info.file_path)
    photo_name = str(chat_id) + '_' + message.document.file_name
    photo_path = PATH_TO_SAVE + photo_name
    with open(photo_path, 'wb') as file:
        file.write(photo)
    covers_info[chat_id]['photo'] = photo_path
    logging.info(f'{chat_id} –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {photo_path}')

    image = Image.open(photo_path)
    width, height = image.size
    markup = types.InlineKeyboardMarkup()
    button_choose_other_photo = types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ',
                                                           callback_data=f'photo-other_{message.message_id}')
    if (width / height) < (PHOTO_WIDTH / PHOTO_HEIGHT):
        logging.warning(f'{chat_id} –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –º–µ–Ω—å—à–µ 3:2 ({round(width / height, 2)})')
        button_photo_bg = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='photo-bg')
        markup.row(button_photo_bg)
        markup.row(button_choose_other_photo)
        msg = BOT.send_message(
            chat_id,
            text='–í–Ω–∏–º–∞–Ω–∏–µ! –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º–µ–Ω—å—à–µ 3:2. –î–ª—è –∑–æ–Ω—ã —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Ñ–æ–Ω –ø–æ –±–æ–∫–∞–º',
            reply_markup=markup
            )
        ids_to_delete[chat_id].append(msg.message_id)
    elif (width / height) > (PHOTO_WIDTH / PHOTO_HEIGHT):
        logging.warning(f'{chat_id} –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –±–æ–ª—å—à–µ 3:2 ({round(width / height), 2})')
        button_photo_crop = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='photo-crop')
        markup.row(button_photo_crop)
        markup.row(button_choose_other_photo)
        msg = BOT.send_message(
            chat_id,
            text='–í–Ω–∏–º–∞–Ω–∏–µ! –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±–æ–ª—å—à–µ 3:2. –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–∞ –ø–æ –±–æ–∫–∞–º',
            reply_markup=markup
            )
        ids_to_delete[chat_id].append(msg.message_id)
    else:
        delete_messages(chat_id)
        process_upper_title(message)


def check_title(message: types.Message, title_type: Literal['upper', 'lower'], save_func: Callable) -> None:
    """
    –≠—Ç–∞–ø 2–± / 3–±: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–∞ (2–≤ / 3–≤)
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ, –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    :param title_type: —Ç–∏–ø –∑–∞–≥–æ–ª–æ–≤–∫–∞: ``upper`` ‚Äì –≤–µ—Ä—Ö–Ω–∏–π, ``lower`` ‚Äì –Ω–∏–∂–Ω–∏–π
    :param save_func: —Ñ—É–Ω–∫—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫
    """
    global ids_to_delete
    chat_id = message.chat.id
    if message.content_type != 'text':
        logging.warning(f'{chat_id} –ó–∞–≥–æ–ª–æ–≤–æ–∫ ({title_type}) –Ω–µ –ø—Ä–∏–Ω—è—Ç, –Ω–µ —Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message.content_type}')
        ids_to_delete[chat_id].append(message.message_id)
        msg = BOT.send_message(
            chat_id,
            text='–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑'
        )
        ids_to_delete[chat_id].append(msg.message_id)
        BOT.register_next_step_handler(msg, check_title, title_type, save_func)
        return

    msg_text = message.text.strip().upper()
    max_n = 3 if title_type == 'upper' else 2
    title_params = pick_title_params(msg_text, title_type)
    covers_info[chat_id][f'{title_type}_title_params'] = title_params
    logging.info(f'{chat_id} –ü–æ–¥–æ–±—Ä–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ ({title_type}): {title_params}')
    font = covers_info[chat_id][f'{title_type}_title_params']['font']

    if istoowide(msg_text, font):
        logging.warning(f'{chat_id} –ó–∞–≥–æ–ª–æ–≤–æ–∫ ({title_type}) –Ω–µ –ø—Ä–∏–Ω—è—Ç, —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {msg_text}')
        ids_to_delete[chat_id].append(message.message_id)
        msg = BOT.send_message(
            chat_id,
            text='–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑'
        )
        ids_to_delete[chat_id].append(msg.message_id)
        BOT.register_next_step_handler(msg, check_title, title_type, save_func)
    elif len(msg_text.split('\n')) > max_n:
        logging.warning(f'{chat_id} –ó–∞–≥–æ–ª–æ–≤–æ–∫ ({title_type}) –Ω–µ –ø—Ä–∏–Ω—è—Ç, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫: {msg_text}')
        ids_to_delete[chat_id].append(message.message_id)
        msg = BOT.send_message(
            chat_id,
            text='–í —Ç–µ–∫—Å—Ç–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–æ–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑'
        )
        ids_to_delete[chat_id].append(msg.message_id)
        BOT.register_next_step_handler(msg, check_title, title_type, save_func)
    else:
        save_func(message)


def save_upper_title(message: types.Message) -> None:
    """
    –≠—Ç–∞–ø 2–≤: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∏–∂–Ω–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (3–∞)
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –≤–µ—Ä—Ö–Ω–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º (2–±)
    """
    chat_id = message.chat.id
    upper_title = message.text.strip().upper()
    covers_info[chat_id]['upper_title'] = upper_title
    logging.info(f'{chat_id} –°–æ—Ö—Ä–∞–Ω—ë–Ω –≤–µ—Ä—Ö–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {upper_title}')
    delete_messages(chat_id)
    process_lower_title(message)


def process_upper_title(message: types.Message) -> None:
    """
    –≠—Ç–∞–ø 2–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (2–±)
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ (1)
    """
    global ids_to_delete
    chat_id = message.chat.id
    ids_to_delete[chat_id] = list()
    msg = BOT.send_message(
        chat_id,
        text='–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø–∏—à–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏)'
        )
    ids_to_delete[chat_id].append(msg.message_id)
    BOT.register_next_step_handler(msg, check_title, 'upper', save_upper_title)


def save_lower_title(message: types.Message) -> None:
    """
    –≠—Ç–∞–ø 3–≤: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∏–∂–Ω–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–≤–µ—Ç–∞ (4–∞)
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –Ω–∏–∂–Ω–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º (3–±)
    """
    global covers_info
    chat_id = message.chat.id
    lower_title = message.text.strip().upper()
    covers_info[chat_id]['lower_title'] = lower_title
    logging.info(f'{chat_id} –°–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–∏–∂–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {lower_title}')
    delete_messages(chat_id)
    process_color(chat_id, 'u')


def process_lower_title(message: types.Message) -> None:
    """
    –≠—Ç–∞–ø 3–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∂–Ω–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (3–±)
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ (2)
    """
    global ids_to_delete
    chat_id = message.chat.id
    ids_to_delete[chat_id] = list()
    msg = BOT.send_message(
        chat_id,
        text='–ù–∞–ø–∏—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞. –ï—Å–ª–∏ –∏—Ö –¥–≤–æ–µ, –Ω–∞–ø–∏—à–∏ –∏–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å'
        )
    ids_to_delete[chat_id].append(msg.message_id)
    BOT.register_next_step_handler(msg, check_title, 'lower', save_lower_title)


def process_color(chat_id: int, prefix: Literal['u', 'l', 'i', 'r']) -> None:
    """
    –≠—Ç–∞–ø 4–∞ / 5–∞ / 6–∞ / 7–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–∞ –ø–ª–∞—à–∫–∏.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é —Ü–≤–µ—Ç–∞ –ø–ª–∞—à–∫–∏ (4–± / 5–± / 6–± / 7–±), –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ (4–≥ / 5–≥ / 6–≥ / 7–≥)
    :param chat_id: –∞–π–¥–∏ —á–∞—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ —ç—Ç–∞–ø–∞ (3, 4, 5, 6)
    :param prefix: –ø—Ä–µ—Ñ–∏–∫—Å –ø–ª–∞—à–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫—Ä–∞—Å–∏—Ç—Å—è: ``u`` ‚Äì –≤–µ—Ä—Ö–Ω—è—è, ``l`` ‚Äì –Ω–∏–∂–Ω—è—è, ``i`` ‚Äì –ª–µ–≤–∞—è, ``r`` ‚Äì –ø—Ä–∞–≤–∞—è
    """
    global ids_to_delete
    ids_to_delete[chat_id] = list()
    markup = types.InlineKeyboardMarkup(row_width=2)
    color_btns = [types.InlineKeyboardButton(k, callback_data=prefix+'_'+v) for k, v in color2hex.items()]
    color_btns.append(types.InlineKeyboardButton('–î—Ä—É–≥–æ–π', callback_data=prefix+'_other'))
    markup.add(*color_btns)

    BOT.send_message(
        chat_id,
        text=f'–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç {PREFIX2POS.get(prefix)} –ø–ª–∞—à–∫–∏',
        reply_markup=markup
        )


@BOT.callback_query_handler(func=lambda call: re.fullmatch(r'[ulir]_#[A-F0-9]{6}', call.data))
def save_color(call: types.CallbackQuery) -> None:
    """
    –≠—Ç–∞–ø 4–≤ / 5–≤ / 6–≤ / 7–≤: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –ø–ª–∞—à–∫–∏.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é —Ü–≤–µ—Ç–∞ –¥—Ä—É–≥–æ–π –ø–ª–∞—à–∫–∏ (5–∞ / 6–∞ / 7–∞), –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ (8–∞)
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Ü–≤–µ—Ç–∞ (4–∞, 5–∞, 6–∞, 7–∞)
    """
    global covers_info
    chat_id = call.message.chat.id
    BOT.delete_message(chat_id, call.message.message_id)
    color = call.data[2:]
    title_fill = define_fill(color)
    cover_info = covers_info[chat_id]
    if call.data.startswith('u'):
        cover_info['upper_color'] = color
        logging.info(f'{chat_id} –°–æ—Ö—Ä–∞–Ω—ë–Ω –≤–µ—Ä—Ö–Ω–∏–π —Ü–≤–µ—Ç: {color}')
        cover_info['upper_title_params']['fill'] = title_fill
        logging.info(f'{chat_id} –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ü–≤–µ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {title_fill}')
        process_color(chat_id, 'l')

    elif call.data.startswith('l'):
        cover_info['lower_color'] = color
        logging.info(f'{chat_id} –°–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–∏–∂–Ω–∏–π —Ü–≤–µ—Ç: {color}')
        cover_info['lower_title_params']['fill'] = title_fill
        logging.info(f'{chat_id} –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ü–≤–µ—Ç –Ω–∏–∂–Ω–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞: {title_fill}')
        process_color(chat_id, 'i')

    elif call.data.startswith('i'):
        cover_info['left_color'] = color
        logging.info(f'{chat_id} –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ü–≤–µ—Ç –ª–µ–≤—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤: {color}')
        process_color(chat_id, 'r')

    elif call.data.startswith('r'):
        cover_info['right_color'] = color
        logging.info(f'{chat_id} –°–æ—Ö—Ä–∞–Ω—ë–Ω —Ü–≤–µ—Ç –ø—Ä–∞–≤—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤: {color}')
        process_corner_forms(call)


def check_other_color(message: types.Message, prefix: Literal['u', 'l', 'i', 'r'], save_func: Callable) -> None:
    """
    –≠—Ç–∞–ø 4–¥ / 5–¥ / 6–¥ / 7–¥:–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ (4–µ / 5–µ / 6–µ / 7–µ)
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ, —Å HEX-–∫–æ–¥–æ–º —Ü–≤–µ—Ç–∞)
    :param prefix: –ø—Ä–µ—Ñ–∏–∫—Å –ø–ª–∞—à–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫—Ä–∞—Å–∏—Ç—Å—è: ``u`` ‚Äì –≤–µ—Ä—Ö–Ω—è—è, ``l`` ‚Äì –Ω–∏–∂–Ω—è—è, ``i`` ‚Äì –ª–µ–≤–∞—è, ``r`` ‚Äì –ø—Ä–∞–≤–∞—è
    :param save_func: —Ñ—É–Ω–∫—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—è—é—â–∞—è —Å–≤–æ–±–æ–¥–Ω—ã–π —Ü–≤–µ—Ç
    """
    msg_text = message.text
    if re.fullmatch(r'^#[0-9a-fA-F]{6}$', msg_text):
        save_func(message, prefix)
    else:
        logging.warning(f'{message.chat.id} HEX-–∫–æ–¥ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –Ω–µ –ø—Ä–∏–Ω—è—Ç: {msg_text}')
        chat_id = message.chat.id
        ids_to_delete[chat_id].append(message.message_id)
        msg = BOT.send_message(
            chat_id,
            text='HEX-–∫–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 7 —Å–∏–º–≤–æ–ª–æ–≤ (–æ—Ç 0 –¥–æ 9, –æ—Ç A –¥–æ F), –ø–µ—Ä–≤—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö #'
            )
        ids_to_delete[chat_id].append(msg.message_id)
        BOT.register_next_step_handler(msg, check_other_color, prefix, save_func)


def save_other_color(message: types.Message, prefix: Literal['u', 'l', 'i', 'r']) -> None:
    """
    –≠—Ç–∞–ø 4–µ / 5–µ / 6–µ / 7–µ: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞ –ø–ª–∞—à–∫–∏ (4–∞ / 5–∞ / 6–∞ / 7–∞)
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º —Å–≤–æ–±–æ–¥–Ω—ã–º —Ü–≤–µ—Ç–æ–º
    :param prefix: –ø—Ä–µ—Ñ–∏–∫—Å –ø–ª–∞—à–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫—Ä–∞—Å–∏—Ç—Å—è: ``u`` ‚Äì –≤–µ—Ä—Ö–Ω—è—è, ``l`` ‚Äì –Ω–∏–∂–Ω—è—è, ``i`` ‚Äì –ª–µ–≤–∞—è, ``r`` ‚Äì –ø—Ä–∞–≤–∞—è
    """
    global color2hex
    chat_id = message.chat.id
    color = message.text.upper()
    color2hex[color] = color
    logging.info(f'{chat_id} –î–æ–±–∞–≤–ª–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π —Ü–≤–µ—Ç: {color}')
    delete_messages(chat_id)
    process_color(chat_id, prefix)


@BOT.callback_query_handler(func=lambda call: call.data.endswith('other'))
def process_other_color(call: types.CallbackQuery) -> None:
    """
    –≠—Ç–∞–ø 4–≥ / 5–≥ / 6–≥ / 7–≥: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ (4–¥ / 5–¥ / 6–¥ / 7–¥)
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 4–∞ / 5–∞ / 6–∞ / 7–∞
    """
    chat_id = call.message.chat.id
    BOT.delete_message(chat_id, call.message.message_id)
    prefix = call.data[0]
    msg = BOT.send_message(
        chat_id,
        text='–ù–∞–ø–∏—à–∏ HEX-–∫–æ–¥ —Ü–≤–µ—Ç–∞ (—á–µ—Ä–µ–∑ #)'
    )
    ids_to_delete[chat_id].append(msg.message_id)
    BOT.register_next_step_handler(msg, check_other_color, prefix, save_other_color)


def process_corner_forms(call: types.CallbackQuery) -> None:
    """
    –≠—Ç–∞–ø 8–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—é —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ (8–±),
    —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ (8–≤)
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ —ç—Ç–∞–ø–∞ (7)
    """
    chat_id = call.message.chat.id
    create_preview_pic(covers_info[chat_id], chat_id, False)
    preview_pic_path = PATH_TO_SAVE + str(call.message.chat.id) + '_' + PREVIEW_PIC_POSTFIX
    BOT.send_photo(chat_id,
                   photo=open(preview_pic_path, 'rb'),
                   caption='–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º—É –±–æ–∫–æ–≤—ã—Ö –ø–ª–∞—à–µ–∫',
                   reply_markup=make_corner_type_markup())


previously_chosen_corner_type: Dict[int, int] = dict()
# –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∂–∞–ª–∏ –¥–≤–∞ —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥ (—ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏)


@BOT.callback_query_handler(func=lambda call: re.fullmatch(r'corner_\d{1,2}', call.data))
def change_corner_type(call: types.CallbackQuery) -> None:
    """
    –ú–µ–Ω—è–µ—Ç —Ç–∏–ø —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Ö –≤—ã–±–æ—Ä–æ–º (8–∞)
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 8–∞
    """
    global previously_chosen_corner_type
    chat_id = call.message.chat.id
    corner_type = int(call.data.split('_')[1])
    if corner_type == previously_chosen_corner_type.get(chat_id):
        pass
    else:
        previously_chosen_corner_type[chat_id] = corner_type
        cover_info = covers_info[chat_id]
        cover_info['corners'] = list(CORNER_COORDS[corner_type])
        logging.info(f'{chat_id} –í—ã–±—Ä–∞–Ω —Ç–∏–ø —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ {corner_type}: {cover_info["corners"]}')

        preview_pic_path = PATH_TO_SAVE + str(call.message.chat.id) + '_' + PREVIEW_PIC_POSTFIX
        my_image = Image.open(preview_pic_path)
        draw = ImageDraw.Draw(my_image)

        for coord, color_state in enumerate(cover_info['corners']):
            color_state = 1 - color_state  # –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ color_state (1 -> 0 –∏–ª–∏ 0 -> 1) –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            redraw_rectangle(coord, color_state, draw, covers_info[chat_id], False)
        my_image.save(preview_pic_path)

        BOT.edit_message_media(media=types.InputMediaPhoto(open(preview_pic_path, 'rb'),
                                                           caption='–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º—É –±–æ–∫–æ–≤—ã—Ö –ø–ª–∞—à–µ–∫'),
                               chat_id=chat_id,
                               message_id=call.message.message_id,
                               reply_markup=make_corner_type_markup())


@BOT.callback_query_handler(func=lambda call: call.data == 'custom_corner')
def process_custom_corners(call: types.CallbackQuery) -> None:
    """
    –≠—Ç–∞–ø 8–±: —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ (8–≤)
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ (8–∞)
    """
    chat_id = call.message.chat.id
    BOT.delete_message(chat_id, call.message.message_id)

    cover_info = covers_info[chat_id]
    preview_pic_path = PATH_TO_SAVE + str(chat_id) + '_' + PREVIEW_PIC_POSTFIX
    my_image = Image.open(preview_pic_path)
    draw = ImageDraw.Draw(my_image)
    draw_preview_digits(list(range(RECTANGLE_NUM * 2)), draw, cover_info)
    my_image.save(preview_pic_path)

    BOT.send_photo(chat_id,
                   photo=open(preview_pic_path, 'rb'),
                   caption='–í—ã–±–µ—Ä–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–∫—Ä–∞—à–µ–Ω—ã',
                   reply_markup=make_interface_markup(CUSTOM_CORNER_PREFIX, cover_info['corners']))


@BOT.callback_query_handler(func=lambda call: call.data == f'{CUSTOM_CORNER_PREFIX}_random')
def draw_random_corners(call: types.CallbackQuery) -> None:
    """
    –†–∏—Å—É–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ (8–±)
    """
    chat_id = call.message.chat.id
    cover_info = covers_info[chat_id]
    random_corners = [randint(0, 1) for _ in range(RECTANGLE_NUM * 2)]
    logging.info(f'{chat_id} –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤: {random_corners}')

    preview_pic_path = PATH_TO_SAVE + str(chat_id) + '_' + PREVIEW_PIC_POSTFIX
    my_image = Image.open(preview_pic_path)
    draw = ImageDraw.Draw(my_image)

    for coord, color_state in enumerate(random_corners):
        redraw_rectangle(coord, color_state, draw, cover_info)
        logging.info(f'{chat_id} –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ {coord}: {color_state}, {cover_info["corners"]}')
    draw_preview_digits(list(range(RECTANGLE_NUM * 2)), draw, cover_info)

    my_image.save(preview_pic_path)
    edit_custom_message(call, cover_info['corners'])


@BOT.callback_query_handler(func=lambda call: re.fullmatch(CUSTOM_CORNER_PREFIX+r'_\d{1,2}_\d', call.data))
def change_custom_corner(call: types.CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞,
    —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ 8–±
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 8–±
    """
    chat_id = call.message.chat.id
    splitted_data = call.data.split('_')
    coord = int(splitted_data[1])
    color_state = int(splitted_data[2])

    preview_pic_path = PATH_TO_SAVE + str(chat_id) + '_' + PREVIEW_PIC_POSTFIX
    my_image = Image.open(preview_pic_path)
    draw = ImageDraw.Draw(my_image)

    cover_info = covers_info[chat_id]
    redraw_rectangle(coord, color_state, draw, cover_info)
    logging.info(f'{chat_id} –ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ {coord}: {color_state}, {cover_info["corners"]}')

    my_image.save(preview_pic_path)
    edit_custom_message(call, cover_info['corners'])


@BOT.callback_query_handler(func=lambda call: call.data in ('corner_ready', f'{CUSTOM_CORNER_PREFIX}_ready'))
def save_corner_forms(call: types.CallbackQuery) -> None:
    """
    –≠—Ç–∞–ø 8–≤: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ–ø–∏—Ä–∞–π—Ç-–Ω–∞–¥–ø–∏—Å–∏ (9–∞)
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 8–∞ / 8–±
    """
    chat_id = call.message.chat.id
    logging.info(f'{chat_id} –ò—Ç–æ–≥–æ–≤–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤: {covers_info[chat_id]["corners"]}')
    BOT.delete_message(chat_id, call.message.message_id)
    process_copyright_sign(call)


def process_copyright_sign(call: types.CallbackQuery) -> None:
    """
    –≠—Ç–∞–ø 9–∞: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ–ø–∏—Ä–∞–π—Ç-–Ω–∞–¥–ø–∏—Å–∏.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é –∫–æ–ø–∏—Ä–∞–π—Ç-–Ω–∞–¥–ø–∏—Å–∏ (9–±)
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ —ç—Ç–∞–ø–∞ (8–∞ / 8–±)
    """
    chat_id = call.message.chat.id
    cover_info = covers_info[chat_id]
    preview_pic_path = PATH_TO_SAVE + str(chat_id) + '_' + PREVIEW_PIC_POSTFIX
    my_image = Image.open(preview_pic_path)
    draw = ImageDraw.Draw(my_image)
    draw_preview_digits(list(range(RECTANGLE_NUM * 2)), draw, cover_info)
    my_image.save(preview_pic_path)

    BOT.send_photo(chat_id,
                   photo=open(preview_pic_path, 'rb'),
                   caption='–í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ, –∫—É–¥–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–¥–ø–∏—Å—å ¬´¬© –õ–ê–ô–í –†–ê–ë–û–¢–ê–ï–¢¬ª',
                   reply_markup=make_interface_markup(COPYRIGHT_SIGN_PREFIX, cover_info['corners'], False, False))


@BOT.callback_query_handler(func=lambda call: re.fullmatch(COPYRIGHT_SIGN_PREFIX+r'_\d{1,2}', call.data))
def save_copyright_coord(call: types.CallbackQuery) -> None:
    """
    –≠—Ç–∞–ø 9–±: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ–ø–∏—Ä–∞–π—Ç-–Ω–∞–¥–ø–∏—Å–∏.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–º—É –ø–æ–∫–∞–∑—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–ª–æ–∂–∫–µ (10)
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 9–∞
    """
    chat_id = call.message.chat.id
    BOT.delete_message(chat_id, call.message.message_id)
    coord = int(call.data.split('_')[1])
    covers_info[chat_id]['copyright_sign'] = coord
    logging.info(f'{chat_id} –í—ã–±—Ä–∞–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ–ø–∏—Ä–∞–π—Ç-–Ω–∞–¥–ø–∏—Å–∏: {coord}')
    show_info(call)


def show_info(call: types.CallbackQuery) -> None:
    """
    –≠—Ç–∞–ø 10: –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±–ª–æ–∂–∫–µ.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É –æ–±–ª–æ–∂–∫–∏ (11)
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 9–±
    """
    chat_id = call.message.chat.id
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å', callback_data='create-pic'))
    msg_list = []
    for k, v in covers_info[chat_id].items():
        msg_list.append(f'{k}: {v}')
        msg_list.append('\n\n')
    BOT.send_message(
        chat_id,
        text=f'–ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n{"".join(msg_list)}\n\n–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–±–æ—Ä—É –æ–±–ª–æ–∂–∫–∏?',
        reply_markup=markup
    )


@BOT.callback_query_handler(func=lambda call: call.data == 'create-pic')
def create_pic(call: types.CallbackQuery) -> None:
    """
    ¬´–°–æ–±–∏—Ä–∞–µ—Ç¬ª –æ–±–ª–æ–∂–∫—É, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ—ë –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–æ–º (11)
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 10
    """
    chat_id = call.message.chat.id
    cover_info = covers_info[chat_id]
    BOT.delete_message(chat_id, call.message.message_id)
    my_image = Image.new(mode='RGBA',
                         size=(PIC_WIDTH, PIC_HEIGHT),
                         color='#000000')
    draw = ImageDraw.Draw(my_image)
    draw_upper_lower_rectangles(draw, cover_info)
    draw_corners(draw, cover_info)
    draw_photo(draw, my_image, cover_info)
    draw_upper_title(draw, cover_info)
    draw_lower_title(draw, cover_info)
    draw_copyright(draw, cover_info)

    result_pic_path = PATH_TO_SAVE + str(chat_id) + '_' + RESULT_PIC_POSTFIX
    my_image.save(result_pic_path)
    logging.info(f'{chat_id} –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏—Ç–æ–≥–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞: {result_pic_path}')
    send_preview(chat_id)


def send_preview(chat_id: int) -> None:
    """
    –≠—Ç–∞–ø 11: —ç–∫—Å–ø–æ—Ä—Ç –æ–±–ª–æ–∂–∫–∏.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ png (12)
    :param chat_id: –∞–π–¥–∏ —á–∞—Ç–∞
    """
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton('–≠–∫—Å–ø–æ—Ä—Ç .png', callback_data='export_png'))
    markup.row(types.InlineKeyboardButton('–°–æ–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –æ–±–ª–æ–∂–∫—É', callback_data='restart'))

    result_pic_path = PATH_TO_SAVE + str(chat_id) + '_' + RESULT_PIC_POSTFIX
    BOT.send_photo(chat_id,
                   photo=open(result_pic_path, 'rb'),
                   caption='–ì–æ—Ç–æ–≤–æ! –í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞',
                   reply_markup=markup)


@BOT.callback_query_handler(func=lambda call: call.data.startswith('export'))
def export_png(call: types.CallbackQuery) -> None:
    """
    –≠—Ç–∞–ø 12: —ç–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ png.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º (13)
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 11
    """
    if call.data == 'export_png':
        chat_id = call.message.chat.id
        markup = types.InlineKeyboardMarkup()
        markup.row(types.InlineKeyboardButton('–°–æ–±—Ä–∞—Ç—å –Ω–æ–≤—É—é –æ–±–ª–æ–∂–∫—É', callback_data='restart'))
        result_pic_path = PATH_TO_SAVE + str(chat_id) + '_' + RESULT_PIC_POSTFIX
        BOT.edit_message_media(media=types.InputMediaPhoto(
                               open(result_pic_path, 'rb'), caption='–ì–æ—Ç–æ–≤–æ! –í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞'),
                               chat_id=chat_id,
                               message_id=call.message.message_id,
                               reply_markup=markup)
        BOT.send_document(chat_id, document=open(result_pic_path, 'rb'))
        logging.info(f'{chat_id} –û—Ç–ø—Ä–∞–≤–ª–µ–Ω png-—Ñ–∞–π–ª: {result_pic_path}')


@BOT.callback_query_handler(func=lambda call: call.data == 'restart')
def restart(call: types.CallbackQuery) -> None:
    """
    –≠—Ç–∞–ø 13: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º.\n
    –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (1–∞)
    :param call: –∑–∞–ø—Ä–æ—Å –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 11
    """
    chat_id = call.message.chat.id
    logging.info(f'{chat_id} –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º')
    BOT.delete_message(call.message.chat.id, call.message.message_id)
    process_photo(call.message)


BOT.polling(none_stop=True)
